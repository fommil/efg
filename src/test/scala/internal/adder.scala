package internal

import java.io.{ File, FileWriter }

import fommil.util._

// produces the truth table for the 4 bit adder example
object Adder {

  val bits = 3
  val cardinality = math.pow(2, bits).toInt

  def main(args: Array[String]): Unit = {
    val f = new File(s"tests/${bits}bitadder.truth")
    val out = new FileWriter(f)

    out.append("# Generated by internal.Adder\n")
    out.append(s"# adder for two $bits bit numbers, with carry\n")

    val header = List(
      List("@"),
      (0 until bits).map(i => s"a$i"),
      (0 until bits).map(i => s"b$i"),
      List("Ci", "|", "Co"),
      (0 until bits).map(i => s"o$i"),
    ).flatten.mkString(" ")

    out.append(header)
    out.append("\n")

    for {
      a <- 0 until cardinality
      b <- 0 until cardinality
      c <- 0 to 1
    } {
      val ab = a.toBinaryString.leftPad('0', bits)
      val bb = b.toBinaryString.leftPad('0', bits)
      val cb = c.toBinaryString
      val ob = (a + b + c).toBinaryString.leftPad('0', 1 + bits)

      out.append(s"$ab $bb $cb | $ob\n")
    }

    out.close()
  }

}

// Local Variables:
// scala-compile-suggestion: "sbt \"Test/runMain internal.Adder\""
// End:
